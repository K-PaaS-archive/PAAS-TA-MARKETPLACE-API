plugins {
	id 'org.springframework.boot' version '2.1.3.RELEASE'
	id 'java'
	id "org.asciidoctor.convert" version "1.5.3"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'org.openpaas.paasta'

sourceCompatibility = 1.8

jar {
	archivesBaseName = 'marketplace-api'
}

repositories {
    mavenLocal()
	mavenCentral()
}

ext {
	tomcatEmbedJasperVersion = '8.5.32'
	// lombokVersion = '1.16.20'
	jstlVersion = '1.2'
	gsonVersion = '2.8.5'
	jacocoVersion = '0.8.1'
	snippetsDir = file('build/generated-snippets')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

    compile "org.openpaas.paasta:PAAS-TA-MARKETPLACE-DOMAIN:0.0.1-SNAPSHOT"
    compile "com.woozooha:adonistrack:0.0.2"
	compile "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatEmbedJasperVersion}"
	compile "javax.servlet:jstl:${jstlVersion}"
	compile "com.google.code.gson:gson:${gsonVersion}"
	compile 'commons-io:commons-io:2.5'
	compile 'commons-fileupload:commons-fileupload:1.3.3'
	compile 'org.projectlombok:lombok:1.16.20'
	compile 'org.springframework.boot:spring-boot-devtools'

	runtimeOnly 'mysql:mysql-connector-java'

    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.3.RELEASE'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.3.RELEASE'
}

jacoco {
	toolVersion = "${jacocoVersion}"
}

test {
    outputs.dir snippetsDir
	ignoreFailures=true
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacoco-overall.exec")
	}
}

asciidoctor { 
    inputs.dir snippetsDir 
    dependsOn test 
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
 
    from ("${asciidoctor.outputDir}/html5")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

bootJar {
    dependsOn asciidoctor 
    from ("${asciidoctor.outputDir}/html5") { 
        into 'static/docs'
    }
}

